# Generated by Django 5.1.2 on 2024-11-02 21:05

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models



def create_initial_data(apps, schema_editor):
    Mood = apps.get_model('api', 'Mood')
    TimePeriod = apps.get_model('api', 'TimePeriod')
    TimeTraveller = apps.get_model('api', 'TimeTraveller')
    AppUser = apps.get_model('api', 'AppUser')
    Diary = apps.get_model('api', 'Diary')
    DiaryEntry = apps.get_model('api', 'DiaryEntry')

    # Seed predefined moods
    predefined_moods = ['Happy', 'Sad', 'Angry', 'Excited', 'Bored']
    for label in predefined_moods:
        Mood.objects.get_or_create(label=label)

    # Seed time periods
    predefined_time_periods = ['Stone Age', 'Roman Republic', 'Viking Era', 'Medieval Europe', 'The Renaissance', 'World War I', 'Current Timeline', 'Space Travel Era']
    for label in predefined_time_periods:
        TimePeriod.objects.get_or_create(label=label)

    # Create a sample user
    user, _ = AppUser.objects.get_or_create(
        username='exampleuser',
        email='user@example.com',
        password='securepassword'  # Note: Use a proper password hashing method in production
    )

    time_traveller, _ = TimeTraveller.objects.get_or_create(
        user = user,
        character_name = 'Leon Colwell',
        age = '18'
    )

    # Create a diary for the sample user
    diary, _ = Diary.objects.get_or_create(
        title='My First Diary',
        date='2024-11-02',  # Use a valid date format
        time_traveller=time_traveller
    )

    # Create a sample diary entry
    DiaryEntry.objects.get_or_create(
        title='First Entry',
        description='This is my first diary entry!',
        diary=diary,
        mood=Mood.objects.first(),  # Use the first predefined mood
        time_period=TimePeriod.objects.first()  # Use the first predefined time period
    )

class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Diary',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('date', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Mood',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='TimePeriod',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='AppUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DiaryEntry',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('time', models.TimeField(auto_now_add=True)),
                ('description', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('diary', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='diary_entries', to='api.diary')),
                ('mood', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.mood')),
                ('time_period', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.timeperiod')),
            ],
        ),
        migrations.CreateModel(
            name='TimeTraveller',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('character_name', models.CharField(max_length=150)),
                ('age', models.IntegerField(validators=[django.core.validators.MaxValueValidator(99)])),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='diary',
            name='time_traveller',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='diary', to='api.timetraveller'),
        ),
        migrations.RunPython(create_initial_data)
    ]
